{"ast":null,"code":"import { createSlice, configureStore } from '@reduxjs/toolkit';\nconst counterSlice = createSlice({\n  user: '',\n  initialState: {\n    currentUser: ''\n  },\n  reducers: {\n    incremented: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decremented: state => {\n      state.value -= 1;\n    }\n  }\n});\nexport const {\n  incremented,\n  decremented\n} = counterSlice.actions;\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\n\n// Can still subscribe to the store\nstore.subscribe(() => console.log(store.getState()));\n\n// Still pass action objects to `dispatch`, but they're created for us\nstore.dispatch(incremented());\n// {value: 1}\nstore.dispatch(incremented());\n// {value: 2}\nstore.dispatch(decremented());\n// {value: 1}","map":{"version":3,"names":["createSlice","configureStore","counterSlice","user","initialState","currentUser","reducers","incremented","state","value","decremented","actions","store","reducer","subscribe","console","log","getState","dispatch"],"sources":["C:/Users/elygh/Desktop/MessagingApp_FullStack/messaging_app/src/redux/store.js"],"sourcesContent":["import { createSlice, configureStore } from '@reduxjs/toolkit'\r\n\r\nconst counterSlice = createSlice({\r\n  user: '',\r\n  initialState: {\r\n    currentUser: ''\r\n  },\r\n  reducers: {\r\n    incremented: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1\r\n    },\r\n    decremented: state => {\r\n      state.value -= 1\r\n    }\r\n  }\r\n})\r\n\r\nexport const { incremented, decremented } = counterSlice.actions\r\n\r\nconst store = configureStore({\r\n  reducer: counterSlice.reducer\r\n})\r\n\r\n// Can still subscribe to the store\r\nstore.subscribe(() => console.log(store.getState()))\r\n\r\n// Still pass action objects to `dispatch`, but they're created for us\r\nstore.dispatch(incremented())\r\n// {value: 1}\r\nstore.dispatch(incremented())\r\n// {value: 2}\r\nstore.dispatch(decremented())\r\n// {value: 1}"],"mappings":"AAAA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,YAAY,GAAGF,WAAW,CAAC;EAC/BG,IAAI,EAAE,EAAE;EACRC,YAAY,EAAE;IACZC,WAAW,EAAE;EACf,CAAC;EACDC,QAAQ,EAAE;IACRC,WAAW,EAAEC,KAAK,IAAI;MACpB;MACA;MACA;MACA;MACAA,KAAK,CAACC,KAAK,IAAI,CAAC;IAClB,CAAC;IACDC,WAAW,EAAEF,KAAK,IAAI;MACpBA,KAAK,CAACC,KAAK,IAAI,CAAC;IAClB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEF,WAAW;EAAEG;AAAY,CAAC,GAAGR,YAAY,CAACS,OAAO;AAEhE,MAAMC,KAAK,GAAGX,cAAc,CAAC;EAC3BY,OAAO,EAAEX,YAAY,CAACW;AACxB,CAAC,CAAC;;AAEF;AACAD,KAAK,CAACE,SAAS,CAAC,MAAMC,OAAO,CAACC,GAAG,CAACJ,KAAK,CAACK,QAAQ,EAAE,CAAC,CAAC;;AAEpD;AACAL,KAAK,CAACM,QAAQ,CAACX,WAAW,EAAE,CAAC;AAC7B;AACAK,KAAK,CAACM,QAAQ,CAACX,WAAW,EAAE,CAAC;AAC7B;AACAK,KAAK,CAACM,QAAQ,CAACR,WAAW,EAAE,CAAC;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}