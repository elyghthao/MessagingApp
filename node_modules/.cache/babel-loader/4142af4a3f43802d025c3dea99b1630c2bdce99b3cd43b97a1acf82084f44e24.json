{"ast":null,"code":"// src/middleware/jsonResponse.js\nvar jsonResponse_default = function jsonResponse_default(opts) {\n  return {\n    onResponse: function onResponse(response) {\n      var contentType = response.headers[\"content-type\"] || \"\";\n      var shouldDecode = opts && opts.force || contentType.indexOf(\"application/json\") !== -1;\n      if (!response.body || !contentType || !shouldDecode) {\n        return response;\n      }\n      return Object.assign({}, response, {\n        body: tryParse(response.body)\n      });\n    },\n    processOptions: function processOptions(options) {\n      return Object.assign({}, options, {\n        headers: Object.assign({\n          Accept: \"application/json\"\n        }, options.headers)\n      });\n    }\n  };\n};\nfunction tryParse(body) {\n  try {\n    return JSON.parse(body);\n  } catch (err) {\n    err.message = \"Failed to parsed response body as JSON: \".concat(err.message);\n    throw err;\n  }\n}\nexport { jsonResponse_default };","map":{"version":3,"mappings":";AAAA,IAAOA,uBAAQ,SAARA,qBAAQC;EAAA,OAAS;IACtBC,YAAY,8BAAY;MACtB,IAAMC,cAAcC,SAASC,QAAQ,mBAAmB;MACxD,IAAMC,eAAgBL,QAAQA,KAAKM,SAAUJ,YAAYK,QAAQ,kBAAkB,MAAM;MACzF,IAAI,CAACJ,SAASK,QAAQ,CAACN,eAAe,CAACG,cAAc;QACnD,OAAOF;MACT;MAEA,OAAOM,OAAOC,OAAO,CAAC,GAAGP,UAAU;QAACK,MAAMG,SAASR,SAASK,IAAI;MAAC,CAAC;IACpE;IAEAI,gBAAgB;MAAA,OACdH,OAAOC,OAAO,CAAC,GAAGG,SAAS;QACzBT,SAASK,OAAOC,OAAO;UAACI,QAAQ;QAAkB,GAAGD,QAAQT,OAAO;MACtE,CAAC;IAAA;EACL;AAAA;AAEA,SAASO,SAASH,MAAM;EACtB,IAAI;IACF,OAAOO,KAAKC,MAAMR,IAAI;EACxB,SAASS,KAAP;IACAA,IAAIC,4DAAqDD,IAAIC;IAC7D,MAAMD;EACR;AACF","names":["jsonResponse_default","opts","onResponse","contentType","response","headers","shouldDecode","force","indexOf","body","Object","assign","tryParse","processOptions","options","Accept","JSON","parse","err","message"],"sources":["C:\\Users\\elygh\\Desktop\\MessagingApp_FullStack\\MessagingApp\\node_modules\\@sanity\\client\\node_modules\\get-it\\src\\middleware\\jsonResponse.js"],"sourcesContent":["export default opts => ({\n  onResponse: response => {\n    const contentType = response.headers['content-type'] || ''\n    const shouldDecode = (opts && opts.force) || contentType.indexOf('application/json') !== -1\n    if (!response.body || !contentType || !shouldDecode) {\n      return response\n    }\n\n    return Object.assign({}, response, {body: tryParse(response.body)})\n  },\n\n  processOptions: options =>\n    Object.assign({}, options, {\n      headers: Object.assign({Accept: 'application/json'}, options.headers)\n    })\n})\n\nfunction tryParse(body) {\n  try {\n    return JSON.parse(body)\n  } catch (err) {\n    err.message = `Failed to parsed response body as JSON: ${err.message}`\n    throw err\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}